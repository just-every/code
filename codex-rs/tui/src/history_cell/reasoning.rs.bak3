//! Collapsible reasoning cells backed by structured reasoning sections.

use super::text;
use super::*;
use crate::history::state::{
    BulletMarker, HistoryId, InlineSpan, ReasoningBlock, ReasoningSection, ReasoningState,
    TextEmphasis, TextTone,
};
use crate::history_cell::assistant::detect_bullet_prefix;
use crate::render::line_utils;
use ratatui::text::Line;
use std::sync::RwLock;
use std::sync::atomic::{AtomicBool, Ordering};
use unicode_width::UnicodeWidthStr as _;

#[derive(Clone, Debug, PartialEq)]
pub(crate) struct CollapsibleReasoningState {
    lines: Vec<ReasoningLineEntry>,
    pub sections: Vec<ReasoningSection>,
    pub in_progress: bool,
    pub hide_when_collapsed: bool,
    pub id: Option<String>,
    pub history_id: HistoryId,
}

#[derive(Clone, Debug, PartialEq)]
struct ReasoningLineEntry {
    raw: Line<'static>,
    spans: Vec<InlineSpan>,
}

impl CollapsibleReasoningState {
    pub(crate) fn new(lines: Vec<Line<'static>>, id: Option<String>) -> Self {
        let theme = crate::theme::current_theme();
        let entries = lines
            .into_iter()
            .map(|line| {
                let spans = text::inline_spans_from_ratatui(&line, &theme);
                ReasoningLineEntry { raw: line, spans }
            })
            .collect::<Vec<_>>();
        let sections = sections_from_entries(&entries);
        Self {
            lines: entries,
            sections,
            in_progress: false,
            hide_when_collapsed: false,
            id,
            history_id: HistoryId::ZERO,
        }
    }
}

pub(crate) struct CollapsibleReasoningCell {
    state: RwLock<CollapsibleReasoningState>,
    collapsed: AtomicBool,
}

impl CollapsibleReasoningCell {
    pub(crate) fn new_with_id(lines: Vec<Line<'static>>, id: Option<String>) -> Self {
        Self {
            state: RwLock::new(CollapsibleReasoningState::new(lines, id)),
            collapsed: AtomicBool::new(true),
        }
    }

    pub(crate) fn from_state(state: ReasoningState) -> Self {
        let ReasoningState {
            id,
            sections,
            effort: _,
            in_progress,
        } = state;

        let theme = crate::theme::current_theme();
        let rendered_lines = sections_to_ratatui_lines(&sections, &theme);
        let entries = rendered_lines
            .into_iter()
            .map(|line| {
                let spans = text::inline_spans_from_ratatui(&line, &theme);
                ReasoningLineEntry { raw: line, spans }
            })
            .collect::<Vec<_>>();

        let cell_state = CollapsibleReasoningState {
            lines: entries,
            sections,
            in_progress,
            hide_when_collapsed: false,
            id: None,
            history_id: id,
        };

        Self {
            state: RwLock::new(cell_state),
            collapsed: AtomicBool::new(true),
        }
    }

    pub(crate) fn matches_id(&self, candidate: &str) -> bool {
        self.state
            .read()
            .unwrap()
            .id
            .as_ref()
            .map(|id| id == candidate)
            .unwrap_or(false)
    }

    pub(crate) fn set_in_progress(&self, in_progress: bool) {
        self.state.write().unwrap().in_progress = in_progress;
    }

    pub(crate) fn toggle_collapsed(&self) {
        let current = self.collapsed.load(Ordering::Relaxed);
        self.collapsed.store(!current, Ordering::Relaxed);
    }

    pub(crate) fn set_collapsed(&self, collapsed: bool) {
        self.collapsed.store(collapsed, Ordering::Relaxed);
    }

    pub(crate) fn is_collapsed(&self) -> bool {
        self.collapsed.load(Ordering::Relaxed)
    }

    pub(crate) fn set_hide_when_collapsed(&self, hide: bool) -> bool {
        let mut state = self.state.write().unwrap();
        if state.hide_when_collapsed == hide {
            return false;
        }
        state.hide_when_collapsed = hide;
        true
    }

    pub(crate) fn append_lines_dedup(&self, new_lines: Vec<Line<'static>>) {
        if new_lines.is_empty() {
            return;
        }
        let mut state = self.state.write().unwrap();
        let theme = crate::theme::current_theme();
        let mut incoming = new_lines
            .into_iter()
            .map(|line| {
                let spans = text::inline_spans_from_ratatui(&line, &theme);
                ReasoningLineEntry { raw: line, spans }
            })
            .collect::<Vec<_>>();
        dedup_append_entries(&mut state.lines, &mut incoming);
        state.lines.extend(incoming);
        state.sections = sections_from_entries(&state.lines);
    }

    pub(crate) fn retint(&self, _old: &crate::theme::Theme, _new: &crate::theme::Theme) {}

    pub(crate) fn debug_title_overlay(&self) -> String {
        let state = self.state.read().unwrap();
        let theme = crate::theme::current_theme();
        debug_title_overlay(&sections_to_ratatui_lines(&state.sections, &theme))
    }

    pub(crate) fn set_history_id(&self, id: HistoryId) {
        self.state.write().unwrap().history_id = id;
    }

    pub(crate) fn reasoning_state(&self) -> ReasoningState {
        let state = self.state.read().unwrap();
        ReasoningState {
            id: state.history_id,
            sections: state.sections.clone(),
            effort: None,
            in_progress: state.in_progress,
        }
    }
}

impl HistoryCell for CollapsibleReasoningCell {
    fn as_any(&self) -> &dyn std::any::Any {
        self
    }

    fn as_any_mut(&mut self) -> &mut dyn std::any::Any {
        self
    }

    fn kind(&self) -> HistoryCellType {
        HistoryCellType::Reasoning
    }

    fn display_lines(&self) -> Vec<Line<'static>> {
        let state = self.state.read().unwrap();
        if state.sections.is_empty() {
            return Vec::new();
        }

        let theme = crate::theme::current_theme();
        let stored_lines = sections_to_ratatui_lines(&state.sections, &theme);
        let normalized = normalized_lines(&stored_lines);

        if self.collapsed.load(Ordering::Relaxed) {
            if state.hide_when_collapsed {
                return Vec::new();
            }
            let mut titles = extract_section_titles_locked(&state, &normalized, &theme);
            if state.in_progress {
                if let Some(mut last) = titles.pop() {
                    last.spans.push(Span::styled(
                        "…",
                        Style::default().fg(crate::colors::text_dim()),
                    ));
                    return vec![last];
                }
                return vec![Line::from("…".dim())];
            }
            titles.pop().into_iter().collect()
        } else {
            let mut out = normalized;
            if state.in_progress {
                out.push(Line::from("…".dim()));
            }
            out
        }
    }

    fn gutter_symbol(&self) -> Option<&'static str> {
        None
    }

    fn has_custom_render(&self) -> bool {
        true
    }

    fn custom_render_with_skip(&self, area: Rect, buf: &mut Buffer, skip_rows: u16) {
        let state = self.state.read().unwrap();
        if self.collapsed.load(Ordering::Relaxed) {
            if state.hide_when_collapsed {
                return;
            }
            let bg_style = Style::default()
                .bg(crate::colors::background())
                .fg(crate::colors::text());
            fill_rect(buf, area, Some(' '), bg_style);
            let lines = self.display_lines_trimmed();
            Paragraph::new(Text::from(lines))
                .block(Block::default().style(Style::default().bg(crate::colors::background())))
                .wrap(Wrap { trim: false })
                .scroll((skip_rows, 0))
                .style(Style::default().bg(crate::colors::background()))
                .render(area, buf);
            return;
        }

        let dim = crate::colors::text_dim();
        let stored_lines =
            sections_to_ratatui_lines(&state.sections, &crate::theme::current_theme());
        let mut lines = normalized_lines(&stored_lines)
            .into_iter()
            .map(|mut line| {
                line.spans = line
                    .spans
                    .into_iter()
                    .map(|s| s.clone().style(Style::default().fg(dim)))
                    .collect();
                line.style = line.style.patch(Style::default().fg(dim));
                line
            })
            .collect::<Vec<_>>();
        if state.in_progress {
            lines.push(Line::from("…".dim()));
        }

        let text = Text::from(trim_empty_lines(lines));
        let bg = crate::colors::background();
        let bg_style = Style::default().bg(bg).fg(dim);
        fill_rect(buf, area, Some(' '), bg_style);

        let block = Block::default()
            .borders(Borders::LEFT)
            .border_style(Style::default().fg(crate::colors::border_dim()).bg(bg))
            .style(Style::default().bg(bg))
            .padding(Padding {
                left: 1,
                right: 0,
                top: 0,
                bottom: 0,
            });

        Paragraph::new(text)
            .block(block)
            .wrap(Wrap { trim: false })
            .scroll((skip_rows, 0))
            .style(Style::default().bg(bg).fg(dim))
            .render(area, buf);
    }
}

fn dedup_append_entries(
    existing: &mut Vec<ReasoningLineEntry>,
    incoming: &mut Vec<ReasoningLineEntry>,
) {
    if incoming.is_empty() {
        return;
    }

    let to_plain = |line: &ReasoningLineEntry| -> String {
        line.spans
            .iter()
            .map(|span| span.text.as_str())
            .collect::<String>()
    };
    let is_marker = |line: &ReasoningLineEntry| -> bool {
        let t = to_plain(line).trim().to_string();
        t.starts_with('[') && t.ends_with(']')
    };

    let mut existing_plain: Vec<String> = existing
        .iter()
        .rev()
        .filter(|l| !is_marker(l))
        .take(64)
        .map(|l| to_plain(l))
        .collect();
    existing_plain.reverse();

    let incoming_plain: Vec<String> = incoming
        .iter()
        .filter(|l| !is_marker(l))
        .map(|l| to_plain(l))
        .collect();

    let max_overlap = existing_plain.len().min(incoming_plain.len());
    let mut overlap = 0usize;
    for k in (1..=max_overlap).rev() {
        if existing_plain[existing_plain.len() - k..] == incoming_plain[..k] {
            overlap = k;
            break;
        }
    }

    if overlap > 0 {
        let mut to_drop = overlap;
        let mut trimmed: Vec<ReasoningLineEntry> = Vec::with_capacity(incoming.len());
        for l in incoming.drain(..) {
            if to_drop > 0 && !is_marker(&l) {
                to_drop -= 1;
                continue;
            }
            trimmed.push(l);
        }
        *incoming = trimmed;
    }

    for nl in incoming.drain(..) {
        let dup = existing
            .last()
            .map(|last| to_plain(last) == to_plain(&nl))
            .unwrap_or(false);
        if !dup {
            existing.push(nl);
        }
    }
}

fn sections_from_entries(lines: &[ReasoningLineEntry]) -> Vec<ReasoningSection> {
    if lines.is_empty() {
        return Vec::new();
    }

    let mut sections: Vec<ReasoningSection> = Vec::new();
    let mut current = new_empty_section();
    let mut summary_set = false;
    let mut idx = 0usize;

    while idx < lines.len() {
        let entry = &lines[idx];
        let plain = plain_text(entry);
        if plain.trim().is_empty() {
            if !current.blocks.is_empty()
                && !matches!(current.blocks.last(), Some(ReasoningBlock::Separator))
            {
                current.blocks.push(ReasoningBlock::Separator);
            }
            idx += 1;
            continue;
        }

        if is_marker_text(&plain) {
            idx += 1;
            continue;
        }

        // TODO: is_code_block_painted removed - using simple heuristic for now
        let is_code_block = entry.raw.spans.iter().any(|s| s.content.starts_with("```"));
        if is_code_block {
            let (block_opt, next_idx) = extract_code_block(lines, idx);
            idx = next_idx;
            if let Some(block) = block_opt {
                if !summary_set {
                    if let ReasoningBlock::Code { content, .. } = &block {
                        if let Some(first_line) = content.lines().find(|l| !l.trim().is_empty()) {
                            current.summary = Some(vec![InlineSpan {
                                text: first_line.trim().to_string(),
                                tone: TextTone::Dim,
                                emphasis: TextEmphasis::default(),
                                entity: None,
                            }]);
                            summary_set = true;
                        }
                    }
                }
                current.blocks.push(block);
            }
            continue;
        }

        if is_heading_entry(entry) {
            trim_section(&mut current);
            if current.heading.is_some() || !current.blocks.is_empty() || current.summary.is_some()
            {
                sections.push(current);
                current = new_empty_section();
            }

            let spans = spans_from_entry(entry);
            if !spans_are_blank(&spans) {
                current.summary = Some(spans.clone());
                summary_set = true;
            } else {
                summary_set = false;
            }
            current.heading = Some(plain.trim().to_string());
            idx += 1;
            continue;
        }

        if let Some((indent, marker, mut spans)) = detect_bullet_block(entry) {
            if !summary_set && !spans_are_blank(&spans) {
                current.summary = Some(spans.clone());
                summary_set = true;
            }
            trim_leading_whitespace(&mut spans);
            current.blocks.push(ReasoningBlock::Bullet {
                indent,
                marker,
                spans,
            });
            idx += 1;
            continue;
        }

        if let Some(mut quote_spans) = extract_quote_spans(entry) {
            if !summary_set && !spans_are_blank(&quote_spans) {
                current.summary = Some(quote_spans.clone());
                summary_set = true;
            }
            trim_leading_whitespace(&mut quote_spans);
            current.blocks.push(ReasoningBlock::Quote(quote_spans));
            idx += 1;
            continue;
        }

        let spans = spans_from_entry(entry);
        if !spans_are_blank(&spans) {
            if !summary_set {
                current.summary = Some(spans.clone());
                summary_set = true;
            }
            current.blocks.push(ReasoningBlock::Paragraph(spans));
        }
        idx += 1;
    }

    trim_section(&mut current);
    if current.heading.is_some() || !current.blocks.is_empty() || current.summary.is_some() {
        sections.push(current);
    }

    sections
}

fn new_empty_section() -> ReasoningSection {
    ReasoningSection {
        heading: None,
        summary: None,
        blocks: Vec::new(),
    }
}

fn trim_section(section: &mut ReasoningSection) {
    while section
        .blocks
        .last()
        .is_some_and(|b| matches!(b, ReasoningBlock::Separator))
    {
        let _ = section.blocks.pop();
    }
}

fn plain_text(entry: &ReasoningLineEntry) -> String {
    entry
        .spans
        .iter()
        .map(|span| span.text.as_str())
        .collect::<String>()
}

fn spans_from_entry(entry: &ReasoningLineEntry) -> Vec<InlineSpan> {
    entry.spans.clone()
}

fn spans_are_blank(spans: &[InlineSpan]) -> bool {
    spans.iter().all(|span| span.text.trim().is_empty())
}

fn is_marker_text(text: &str) -> bool {
    let trimmed = text.trim();
    trimmed.starts_with('[') && trimmed.ends_with(']')
}

fn is_heading_entry(entry: &ReasoningLineEntry) -> bool {
    let mut has_content = false;
    for span in &entry.spans {
        if span.text.trim().is_empty() {
            continue;
        }
        has_content = true;
        if !span.emphasis.bold {
            return false;
        }
    }
    has_content
}

fn detect_bullet_block(entry: &ReasoningLineEntry) -> Option<(u8, BulletMarker, Vec<InlineSpan>)> {
    let (indent_spaces, bullet) = detect_bullet_prefix(&entry.raw)?;
    let plain = plain_text(entry);
    let prefix_len = compute_bullet_prefix_len(&plain, indent_spaces, &bullet);
    let spans = strip_prefix_from_inline_spans(spans_from_entry(entry), prefix_len);
    if spans_are_blank(&spans) {
        return None;
    }
    let indent_level = (indent_spaces / 2).min(u8::MAX as usize) as u8;
    let marker = parse_bullet_marker(&bullet);
    Some((indent_level, marker, spans))
}

fn compute_bullet_prefix_len(plain: &str, indent_spaces: usize, bullet: &str) -> usize {
    let mut consumed = 0usize;
    let mut chars = plain.chars();
    for _ in 0..indent_spaces {
        if chars.next().is_some() {
            consumed += 1;
        }
    }
    for ch in bullet.chars() {
        match chars.next() {
            Some(c) if c == ch => consumed += 1,
            Some(_) => {
                consumed += 1;
            }
            None => break,
        }
    }
    if matches!(chars.clone().next(), Some(c) if c.is_whitespace()) {
        chars.next();
        consumed += 1;
    }
    consumed
}

fn parse_bullet_marker(bullet: &str) -> BulletMarker {
    if let Some(num) = bullet.strip_suffix('.').and_then(|s| s.parse::<u32>().ok()) {
        return BulletMarker::Numbered(num);
    }
    if let Some(num) = bullet.strip_suffix(')').and_then(|s| s.parse::<u32>().ok()) {
        return BulletMarker::Numbered(num);
    }
    if matches!(bullet, "-" | "*") {
        BulletMarker::Dash
    } else {
        BulletMarker::Custom(bullet.to_string())
    }
}

fn strip_prefix_from_inline_spans(
    spans: Vec<InlineSpan>,
    mut chars_to_strip: usize,
) -> Vec<InlineSpan> {
    let mut out: Vec<InlineSpan> = Vec::new();
    for mut span in spans.into_iter() {
        if chars_to_strip == 0 {
            if !span.text.is_empty() {
                out.push(span);
            }
            continue;
        }
        let len = span.text.chars().count();
        if chars_to_strip >= len {
            chars_to_strip -= len;
            continue;
        }
        let trimmed: String = span.text.chars().skip(chars_to_strip).collect();
        span.text = trimmed;
        chars_to_strip = 0;
        if !span.text.is_empty() {
            out.push(span);
        }
    }
    out
}

fn trim_leading_whitespace(spans: &mut Vec<InlineSpan>) {
    while let Some(first) = spans.first_mut() {
        let original = first.text.clone();
        let trimmed = original.trim_start().to_string();
        if trimmed.is_empty() {
            spans.remove(0);
            continue;
        }
        if trimmed.len() != original.len() {
            first.text = trimmed;
        }
        break;
    }
}

fn extract_quote_spans(entry: &ReasoningLineEntry) -> Option<Vec<InlineSpan>> {
    let plain = plain_text(entry);
    let mut chars = plain.chars().peekable();
    let mut prefix = 0usize;
    let mut saw_marker = false;
    while let Some(&c) = chars.peek() {
        if c.is_whitespace() && !saw_marker {
            chars.next();
            prefix += 1;
            continue;
        }
        if c == '>' {
            chars.next();
            prefix += 1;
            saw_marker = true;
            if matches!(chars.peek(), Some(' ')) {
                chars.next();
                prefix += 1;
            }
            break;
        }
        break;
    }
    if !saw_marker {
        return None;
    }
    let spans = strip_prefix_from_inline_spans(spans_from_entry(entry), prefix);
    if spans_are_blank(&spans) {
        return None;
    }
    Some(spans)
}

fn extract_code_block(
    lines: &[ReasoningLineEntry],
    start_idx: usize,
) -> (Option<ReasoningBlock>, usize) {
    let mut idx = start_idx;
    let mut chunk: Vec<Line<'static>> = Vec::new();
    // TODO: is_code_block_painted removed - using simple heuristic for now
    while idx < lines.len() {
        let is_code_block = lines[idx]
            .raw
            .spans
            .iter()
            .any(|s| s.content.starts_with("```"));
        if !is_code_block {
            break;
        }
        chunk.push(lines[idx].raw.clone());
        idx += 1;
    }
    if chunk.is_empty() {
        return (None, idx);
    }

    let mut lang_label: Option<String> = None;
    let mut content_lines: Vec<Line<'static>> = Vec::new();
    for (line_idx, line) in chunk.into_iter().enumerate() {
        let flat = flatten_line(&line);
        if line_idx == 0 {
            if let Some(label) = extract_lang_label(&flat) {
                lang_label = Some(label);
                continue;
            }
        }
        if flat.contains("⟦LANG:") {
            continue;
        }
        content_lines.push(line);
    }

    while content_lines
        .first()
        .is_some_and(|l| line_utils::is_blank_line_spaces_only(l))
    {
        let _ = content_lines.remove(0);
    }
    while content_lines
        .last()
        .is_some_and(|l| line_utils::is_blank_line_spaces_only(l))
    {
        let _ = content_lines.pop();
    }

    if content_lines.is_empty() {
        return (None, idx);
    }

    let mut content = String::new();
    for (i, line) in content_lines.iter().enumerate() {
        if i > 0 {
            content.push('\n');
        }
        content.push_str(flatten_line(line).trim_end_matches('\n'));
    }

    (
        Some(ReasoningBlock::Code {
            language: lang_label,
            content,
        }),
        idx,
    )
}

fn flatten_line(line: &Line<'static>) -> String {
    line.spans
        .iter()
        .map(|s| s.content.as_ref())
        .collect::<String>()
}

fn extract_lang_label(flat: &str) -> Option<String> {
    let tail = flat.strip_prefix("⟦LANG:")?;
    let end = tail.find('⟧')?;
    Some(tail[..end].to_string())
}

fn sections_to_ratatui_lines(
    sections: &[ReasoningSection],
    theme: &crate::theme::Theme,
) -> Vec<Line<'static>> {
    let mut out: Vec<Line<'static>> = Vec::new();
    for section in sections {
        if let Some(heading) = &section.heading {
            out.push(Line::from(vec![Span::styled(
                heading.clone(),
                Style::default()
                    .fg(crate::colors::text())
                    .add_modifier(Modifier::BOLD),
            )]));
        }
        for block in &section.blocks {
            match block {
                ReasoningBlock::Paragraph(spans) => {
                    let spans: Vec<Span<'static>> = spans
                        .iter()
                        .map(|span| text::inline_span_to_span(span, theme))
                        .collect();
                    out.push(Line::from(spans));
                }
                ReasoningBlock::Bullet {
                    indent,
                    marker,
                    spans,
                } => {
                    let indent_spaces = (*indent as usize).saturating_mul(2);
                    let marker_text = match marker {
                        BulletMarker::Dash => "•".to_string(),
                        BulletMarker::Numbered(n) => format!("{}.", n),
                        BulletMarker::Custom(s) => s.clone(),
                    };
                    let mut line_spans = Vec::new();
                    line_spans.push(Span::raw(format!(
                        "{}{} ",
                        " ".repeat(indent_spaces),
                        marker_text
                    )));
                    for span in spans {
                        line_spans.push(text::inline_span_to_span(span, theme));
                    }
                    out.push(Line::from(line_spans));
                }
                ReasoningBlock::Code { content, .. } => {
                    for line in content.lines() {
                        out.push(Line::from(Span::styled(
                            line.to_string(),
                            Style::default()
                                .fg(crate::colors::text_dim())
                                .add_modifier(Modifier::DIM),
                        )));
                    }
                }
                ReasoningBlock::Quote(spans) => {
                    let mut line_spans = vec![Span::raw("> ")];
                    for span in spans {
                        line_spans.push(text::inline_span_to_span(span, theme));
                    }
                    out.push(Line::from(line_spans));
                }
                ReasoningBlock::Separator => out.push(Line::from(String::new())),
            }
        }
    }
    out
}

fn collect_section_summaries(
    sections: &[ReasoningSection],
    theme: &crate::theme::Theme,
) -> Vec<Line<'static>> {
    let mut out = Vec::new();
    for section in sections {
        if let Some(summary) = section
            .summary
            .as_ref()
            .filter(|spans| !spans_are_blank(spans))
        {
            let spans = summary
                .iter()
                .map(|span| text::inline_span_to_span(span, theme))
                .collect::<Vec<_>>();
            out.push(Line::from(spans));
        } else if let Some(heading) = &section.heading {
            out.push(Line::from(vec![Span::styled(
                heading.clone(),
                Style::default()
                    .fg(crate::colors::text())
                    .add_modifier(Modifier::BOLD),
            )]));
        }
    }
    out
}

fn normalized_lines(lines: &[Line<'static>]) -> Vec<Line<'static>> {
    let mut out: Vec<Line<'static>> = Vec::new();
    for line in lines {
        if line.spans.len() <= 1 {
            out.push(line.clone());
            continue;
        }

        let mut idx = 0usize;
        while idx < line.spans.len() {
            let s = &line.spans[idx];
            let is_bold = s.style.add_modifier.contains(Modifier::BOLD);
            if idx == 0 && s.content.trim().is_empty() {
                idx += 1;
                continue;
            }
            if is_bold {
                idx += 1;
                continue;
            }
            break;
        }

        if idx == 0 || idx >= line.spans.len() {
            out.push(line.clone());
            continue;
        }

        let mut title_spans = Vec::new();
        let mut rest_spans = Vec::new();
        for (i, s) in line.spans.iter().enumerate() {
            if i < idx {
                title_spans.push(s.clone());
            } else {
                rest_spans.push(s.clone());
            }
        }

        out.push(Line::from(title_spans));
        let rest_is_blank = rest_spans.iter().all(|s| s.content.trim().is_empty());
        if !rest_is_blank {
            out.push(Line::from(rest_spans));
        }
    }
    out
}

fn extract_section_titles_locked(
    state: &CollapsibleReasoningState,
    normalized: &[Line<'static>],
    theme: &crate::theme::Theme,
) -> Vec<Line<'static>> {
    let mut titles = collect_section_summaries(&state.sections, theme);
    if titles.is_empty() && !state.in_progress {
        titles = normalized
            .iter()
            .filter(|line| line.spans.iter().any(|s| !s.content.trim().is_empty()))
            .cloned()
            .collect();
    }

    let color = crate::colors::text_dim();
    titles
        .into_iter()
        .map(|line| {
            let spans: Vec<Span<'static>> = line
                .spans
                .into_iter()
                .map(|s| s.style(Style::default().fg(color)))
                .collect();
            Line::from(spans)
        })
        .collect()
}

fn debug_title_overlay(lines: &[Line<'static>]) -> String {
    let mut title_idxs: Vec<usize> = Vec::new();
    let mut title_previews: Vec<String> = Vec::new();
    for (i, l) in normalized_lines(lines).iter().enumerate() {
        let is_title = !l.spans.is_empty()
            && l.spans.iter().all(|s| {
                s.style.add_modifier.contains(Modifier::BOLD) || s.content.trim().is_empty()
            });
        if is_title {
            title_idxs.push(i);
            let mut text: String = l.spans.iter().map(|s| s.content.as_ref()).collect();
            let maxw = 60usize;
            if text.width() > maxw {
                let (prefix, _suffix, _w) =
                    crate::live_wrap::take_prefix_by_width(&text, maxw.saturating_sub(1));
                text = format!("{}…", prefix);
            }
            title_previews.push(text);
        }
    }

    let total = lines.len();
    let titles = title_previews.len();
    let lastw = lines
        .last()
        .map(|l| {
            l.spans
                .iter()
                .map(|s| s.content.as_ref())
                .collect::<String>()
                .width()
        })
        .unwrap_or(0);
    format!(
        "rtitles={} idx={:?} total_lines={} lastw={} prevs={:?}",
        titles, title_idxs, total, lastw, title_previews
    )
}
