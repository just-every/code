{
  "spec-plan": {
    "gemini": {
      "role": "Researcher",
      "prompt": "Context:\n${CONTEXT}\n\nTask:\nSurvey SPEC ${SPEC_ID}. Summarize:\n1. Acceptance criteria and evidence requirements.\n2. Conflicts, gaps, stale telemetry, blocked tasks.\n3. Related files/modules/tests worth touching.\n4. Questions to clarify before planning.\nKeep under 400 words. Cite file paths or memory IDs."
    },
    "claude": {
      "role": "Synthesizer",
      "prompt": "Inputs:\n- SPEC packet\n- Gemini research (${PREVIOUS_OUTPUTS.gemini})\n\nDeliver a structured plan:\n1. Work Breakdown (≤7 steps; each with rationale and success signal).\n2. Acceptance Mapping table (Requirement | Validation Step | Artifact).\n3. Risks & Mitigations (with owners or follow-ups).\nReference all sources by path or memory ID."
    },
    "gpt_pro": {
      "role": "Executor & QA",
      "prompt": "Inputs:\n- SPEC packet\n- Gemini and Claude outputs (${PREVIOUS_OUTPUTS})\n\nActions:\n1. Check plan feasibility against repo reality (branch, tooling, hooks).\n2. Highlight missing tests, telemetry steps, or guardrails.\n3. Merge prior outputs into a Final Plan section with Consensus & Conflicts noted.\nRecord rationale for any overrides; list required guardrail commands."
    }
  },
  "spec-tasks": {
    "gemini": {
      "role": "Researcher",
      "prompt": "Context:\n${CONTEXT}\n\nList key implementation surfaces (files/modules/tests) and current SPEC.md task status. Identify dependencies or blockers for ${SPEC_ID}."
    },
    "claude": {
      "role": "Synthesizer",
      "prompt": "Inputs: SPEC packet, Gemini analysis (${PREVIOUS_OUTPUTS.gemini}), Plan summary (${PREVIOUS_OUTPUTS.plan}).\n\nProduce SPEC task table rows (Order, Task ID, Title, Status, Validation Step, Notes). Ensure acceptance mapping coverage and include any lint/tests to run."
    },
    "gpt_pro": {
      "role": "Executor & QA",
      "prompt": "Review Gemini/Claude tasks, check guardrail requirements (branch, clean tree, lint/test hooks). Output:\n1. Validated task list ready for SPEC.md update.\n2. Instructions for updating SPEC.md Tasks table and docs/SPEC-*/tasks.md.\n3. List of commands/tests to run per task."
    }
  },
  "spec-implement": {
    "gemini": {
      "prompt": "Given ${CONTEXT} and task list (${PREVIOUS_OUTPUTS.tasks}), enumerate relevant code paths, recent changes, and tests. Flag tricky edge cases or integration points."
    },
    "claude": {
      "prompt": "Outline implementation strategy:\n- Approach summary per task.\n- Proposed changes (files/functions).\n- Validation plan (tests/commands).\nReference Gemini findings."
    },
    "gpt_pro": {
      "prompt": "Validate feasibility, schedule guardrail shells (`/spec-ops-implement`), and produce execution checklist:\n1. Step-by-step edits with commands.\n2. Required validations (fmt/clippy/tests/hashes).\n3. Risk notes. Apply diffs when run via orchestrator."
    }
  },
  "spec-validate": {
    "gemini": {
      "prompt": "Summarize telemetry from `/spec-ops-validate` for ${SPEC_ID}: scenario → status, log path, failures."
    },
    "claude": {
      "prompt": "Crosswalk acceptance criteria vs telemetry results. Flag unmet criteria and remediation steps. Provide summary table."
    },
    "gpt_pro": {
      "prompt": "Confirm shell outputs, ensure evidence hashes exist, and deliver final validation decision with next actions."
    }
  },
  "spec-review": {
    "gemini": {
      "prompt": "Collect review artifacts: git diff summary, tests run, outstanding TODOs, risks."
    },
    "claude": {
      "prompt": "Draft Go/No-Go memo with sections: Overview, Evidence, Risks, Mitigations, Open Items. Reference artifacts."
    },
    "gpt_pro": {
      "prompt": "Verify guardrails (locks, telemetry, tasks table). Provide final recommendation, conditions, and merge readiness."
    }
  },
  "spec-unlock": {
    "gemini": {
      "prompt": "Explain why SPEC ${SPEC_ID} is locked, current branch state, pending work, and risks if unlocked."
    },
    "claude": {
      "prompt": "Write unlock justification memo with rationale, safeguards, and follow-up actions."
    },
    "gpt_pro": {
      "prompt": "Check guardrail compliance, decide unlock (approve/deny). If approve, list steps and update local-memory evidence."
    }
  },
  "spec-auto": {
    "orchestrator_notes": [
      "Before each stage: ensure guardrail shell succeeded; fan out prompts above; collect outputs.",
      "After each stage: persist Gemini/Claude/GPT transcripts (with MCP IDs) to evidence dir and local-memory.",
      "On failure: emit resume token {stage, reason, suggested fix}."
    ]
  }
}
